#include <stdio.h>
#include <stdbool.h>


struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};


struct AdjList {
    struct AdjListNode* head;
};


struct Graph {
    int numVertices;
    struct AdjList* array;
};


struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}


struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

graph->array = (struct AdjList*) malloc(numVertices * sizeof(struct AdjList));

   
    for (int i = 0; i < numVertices; ++i)
        graph->array[i].head = NULL;

    return graph;
}


void addEdge(struct Graph* graph, int src, int dest) {
  
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}


void printAllPathsDFS(struct Graph* graph, int src, int dest, bool visited[], int path[], int pathIndex) {
 
    visited[src] = true;
    path[pathIndex] = src;
    pathIndex++;

    if (src == dest) {
        printf("Path found: ");
        for (int i = 0; i < pathIndex; i++) {
            printf("%d ", path[i]);
            if (i < pathIndex - 1)
                printf("-> ");
        }
        printf("\n");
    } else {
struct AdjListNode* temp = graph->array[src].head;
        while (temp) {
            if (!visited[temp->dest])
                printAllPathsDFS(graph, temp->dest, dest, visited, path, pathIndex);
            temp = temp->next;
        }
    }

  
    visited[src] = false;
}


int main() {
    struct Graph* graph = createGraph(V);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 0, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 1, 3);

    int src = 0, dest = 3; 

    bool visited[V] = {false}; 
    int path[V]; 
    int pathIndex = 0;

    printf("All paths from vertex %d to vertex %d:\n", src, dest);
    printAllPathsDFS(graph, src, dest, visited, path, pathIndex);

    return 0;
}
