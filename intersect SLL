#include <stdio.h>
#include <stdlib.h>


struct ListNode {
    int data;
    struct ListNode* next;
};


struct ListNode* createNode(int data) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


int lengthOfList(struct ListNode* head) {
    int length = 0;
    struct ListNode* current = head;
    while (current != NULL) {
        length++;
        current = current->next;
    }
    return length;
}


struct ListNode* getIntersectionNode(struct ListNode* head1, struct ListNode* head2) {
    if (head1 == NULL || head2 == NULL) {
        return NULL;
    }

   
    int len1 = lengthOfList(head1);
    int len2 = lengthOfList(head2);

 
    struct ListNode* ptr1 = head1;
    struct ListNode* ptr2 = head2;

    
    if (len1 > len2) {
        int diff = len1 - len2;
        while (diff > 0) {
            ptr1 = ptr1->next;
            diff--;
        }
    } else if (len2 > len1) {
        int diff = len2 - len1;
        while (diff > 0) {
            ptr2 = ptr2->next;
            diff--;
        }
    }

    
    while (ptr1 != ptr2) {
        ptr1 = ptr1->next;
        ptr2 = ptr2->next;
    }

    return ptr1;
}


int main() {
    
    struct ListNode* head1 = createNode(3);
    head1->next = createNode(6);
    head1->next->next = createNode(9);
    head1->next->next->next = createNode(15);
    head1->next->next->next->next = createNode(30);

   
    struct ListNode* head2 = createNode(10);
    head2->next = createNode(15);
    head2->next->next = createNode(30);

    head2->next->next->next = head1->next->next->next; // Intersection point

  
    struct ListNode* intersectionNode = getIntersectionNode(head1, head2);

  
    if (intersectionNode != NULL) {
        printf("Intersection point of the two linked lists is at node with value: %d\n", intersectionNode->data);
    } else {
        printf("No intersection point found.\n");
    }

    return 0;
}
