#include <stdio.h>
#include <stdlib.h>


struct Node {
    int key;
    struct Node* left;
    struct Node* right;
};


struct Node* newNode(int item) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}


struct Node* insert(struct Node* node, int key) {
   
    if (node == NULL)
        return newNode(key);

    
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);

   
    return node;
}


struct Node* search(struct Node* root, int key) {
   
    if (root == NULL || root->key == key)
        return root;

   
    if (root->key < key)
        return search(root->right, key);

   
    return search(root->left, key);
}


struct Node* minValueNode(struct Node* node) {
    struct Node* current = node;

  
    while (current && current->left != NULL)
        current = current->left;

    return current;
}


struct Node* maxValueNode(struct Node* node) {
    struct Node* current = node;

   
    while (current && current->right != NULL)
        current = current->right;

    return current;
}


void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}


int main() {
  
    struct Node* root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

  
    printf("Inorder traversal of the given tree: ");
    inorder(root);
    printf("\n");

    
    int key = 40;
    struct Node* search_result = search(root, key);
    if (search_result != NULL)
        printf("Element %d found in the BST.\n", key);
    else
        printf("Element %d not found in the BST.\n", key);

   
    struct Node* min_node = minValueNode(root);
    if (min_node != NULL)
        printf("The minimum element is %d.\n", min_node->key);

  
    struct Node* max_node = maxValueNode(root);
    if (max_node != NULL)
        printf("The maximum element is %d.\n", max_node->key);

    return 0;
}
